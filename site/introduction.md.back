# EIM Next APP とは

## モチベーション

これまでの EIM アプリは、ローコードで簡単なアプリなら迅速に作成・デプロイできることが特徴です。

しかしその反面、UI の自由度少なく、複雑なビジネスロジックが必要なアプリのメンテナンス性が悪いものになります。

EIM Next APP では、現在のアプリの下記の欠点を克服する目的で設計されています。

- 自由な WebUI を実装できる。
  - アプリの目的、モバイルなどの環境に合わせた UI を提供できる。
  - 専用のライブラリを提供することで、ゆるい共通UIフレームワークを利用でき、工数の削減が期待できる。
- 複雑なビジネスロジックを、ドメイン駆動設計のレイヤリング・アーキテクチャを採用することで、メンテナンス性の良いコードが書ける。
- REST API ベースの設計を行うことができ、UI と ビジネスロジックを分離することで、システム間連携が容易になる。
- テスト駆動開発で実装することで、堅牢なコーディングができる。
- DevOps を導入できる。素早い開発・デプロイの環境を整えることができる。

開発者は、フレームワークを使っただけでは十分なメリットを得られません。

アプリケーションは、その要求に応じて多様なため、特に設計において十分に検討する必要があります。また、コーディングに関しても、モジュール分割や十分なテストを書かなければなりません。

それらの指針をここで提供しますので、しっかりと学習しましょう。

### サービスの素早い提供 vs 長期のメンテナンス

昨今では、サービスを素早く提供することに重きが置かれます。そうすると、このドキュメントに書かれていることは、重厚で無駄に思われる方もいるかも知れません。

しかし一方で、一旦世に出たサービスが人気となり、長期にわたりメンテナンスする必要が出て来ることもあります。その過程でも、素早いアップデートが求められます。

初期のリリースで、速さを求めて十分な設計やテストが無い場合、リリース後のアップデートが指数関数的に重くなってきてしまします。

結果的に、コストが大きくなり、利用者の満足も得られなくなるでしょう。更に重要なのは、セキュリティ上の不具合も出てくると致命的です。

そうならないためには、十分な設計とそれができる知識が必要になります。

ファースト・リリースの速度が必要な場合は、まずは速度を重視した実装を行っても良いでしょう。ただし、後に設計を見直したり、アプリケーションを作り直したりする計画を必ず入れてください。
そのことを、プロダクト。オーナーに理解してもらうことが必要です。

いずれにしても、素早いリリースが求められるから、設計の知識や配慮は必要ない、ということにはなりません。

設計に対する十分な知識があり、そこから必要に合わせて妥協して崩す、ということが必要です。

> 引用: 成瀬 允宣. ドメイン駆動設計入門 ボトムアップでわかる！ドメイン駆動設計の基本 (p.42). 株式会社翔泳社. Kindle 版.
>
> ひと昔前はサービスをいち早く世に出すことこそがもっとも重要なこととされていたように感じます。そのためモデリングに重きを置き、開発の最初期にコストを支払うドメイン駆動設計は重厚で鈍重なものであると誤解され、敬遠されていました。
>
> (中略)
>
> ソフトウェアは変化するものです。ごく最初期の局所的な開発速度を優先したソフトウェアは、柔軟性に乏しく、変化を吸収しきれません。ソフトウェアに求められる変化に対応するために、開発者は継ぎはぎのような修正を重ねます。数年もすればソフトウェアは複雑怪奇な進化を遂げるでしょう。
>
> それでも時代の変化についていくために、開発者は辟易しながら継ぎはぎだらけの修正を積み重ねるのです。場当たり的な対応に嫌気の差した開発者たちが片道ロケットの打ち上げ競争ではなく、飛行機の安定運用を願うようになるのも想像に難くありません。救いを求めて手にしたものの中にドメイン駆動設計がありました。
